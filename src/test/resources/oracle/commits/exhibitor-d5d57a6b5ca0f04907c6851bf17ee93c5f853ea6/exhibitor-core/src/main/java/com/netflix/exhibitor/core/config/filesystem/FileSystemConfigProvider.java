/*
 *
 *  Copyright 2011 Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

package com.netflix.exhibitor.core.config.filesystem;

import com.google.common.io.Closeables;
import com.netflix.exhibitor.core.config.ConfigCollection;
import com.netflix.exhibitor.core.config.ConfigProvider;
import com.netflix.exhibitor.core.config.LoadedInstanceConfig;
import com.netflix.exhibitor.core.config.PropertyBasedInstanceConfig;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.nio.channels.Channels;
import java.nio.channels.FileLock;
import java.util.Properties;

/**
 * Config provider that uses a properties file store locally
 */
public class FileSystemConfigProvider implements ConfigProvider
{
    private final File propertiesFile;
    private final Properties defaults;

    /**
     * @param propertiesFile where to store the properties
     */
    @SuppressWarnings("UnusedDeclaration")
    public FileSystemConfigProvider(File propertiesFile)
    {
        this(propertiesFile, new Properties());
    }

    /**
     * @param propertiesFile where to store the properties
     * @param defaults default values
     */
    public FileSystemConfigProvider(File propertiesFile, Properties defaults)
    {
        this.propertiesFile = propertiesFile;
        this.defaults = defaults;
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception
    {
        Properties      properties = new Properties();
        if ( propertiesFile.exists() )
        {
            RandomAccessFile    raf = new RandomAccessFile(propertiesFile, "rw");
            try
            {
                FileLock        lock = raf.getChannel().lock();
                try
                {
                    properties.load(Channels.newInputStream(raf.getChannel()));
                }
                finally
                {
                    lock.release();
                }
            }
            finally
            {
                Closeables.closeQuietly(raf);
            }
        }
        PropertyBasedInstanceConfig config = new PropertyBasedInstanceConfig(properties, defaults);
        return new LoadedInstanceConfig(config, propertiesFile.lastModified());
    }

    @Override
    public LoadedInstanceConfig storeConfig(ConfigCollection config, long compareLastModified) throws Exception
    {
        PropertyBasedInstanceConfig     propertyBasedInstanceConfig = new PropertyBasedInstanceConfig(config);

        long                lastModified = 0;
        FileOutputStream    fileStream = new FileOutputStream(propertiesFile);
        OutputStream        out = new BufferedOutputStream(fileStream);
        try
        {
            FileLock lock = fileStream.getChannel().lock();
            try
            {
                propertyBasedInstanceConfig.getProperties().store(out, "Auto-generated by Exhibitor");
                lastModified = propertiesFile.lastModified();
            }
            finally
            {
                lock.release();
            }
        }
        finally
        {
            Closeables.closeQuietly(out);
        }

        return new LoadedInstanceConfig(propertyBasedInstanceConfig, lastModified);
    }
}
